{"version":3,"sources":["useInterval.js","node.js","Components/Gameover.js","Components/Header.js","Components/Overlay.js","Components/Node.js","Components/PlayArea.js","App.js","reportWebVitals.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","Node","row","col","this","state","Gameover","className","Header","resetHandler","playGame","speedHandler","onClick","Overlay","score","PlayArea","grid","map","rowIDX","node","colIDX","SnakeBody","next","nextBody","App","useState","directionHead","undefined","tail","snakeHead","setHead","initialGrid","isStarted","boardState","setState","isRunning","setRunning","direction","setDirection","gameScore","setScore","gameSpeed","setSpeed","gameOver","win","document","getElementById","style","display","innerHTML","classList","add","checkPotentialDeath","updateSnake","newRow","newCol","previous","saveCurrent","newGrid","slice","newScore","generateNewFoodObject","foodConsumption","updateBoard","cells","Set","size","newFoodCol","Math","floor","random","newFoodRow","has","console","log","i","push","j","window","addEventListener","e","stopImmediatePropagation","key","handleDirectionChange","resetBoard","newDirection","newSnakeHeadCol","newSnakeHeadRow","updateSnakeHeadUsingSnakeHeadDirection","updateSnakeHeadUsingGlobalDirection","remove","mode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.47da06ae.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","class Node {\n  // A node class\n  constructor(row, col) {\n    this.row = row;\n    this.col = col;\n    this.id = `${row}-${col}`;\n    this.state = \"node\"; // the default \"unvisited\" node\n  }\n}\nexport default Node;\n","import React from 'react'\n\nconst Gameover = () => {\n    return (\n        <div id=\"pop-up\" className=\"pop-up\">\n            GAMEOVER. PRESS RESET TO PLAY AGAIN.\n        </div>\n    )\n}\n\nexport default Gameover\n","import React from \"react\";\n\nconst Header = ({ resetHandler, playGame, speedHandler }) => {\n  return (\n    <header>\n      <ul>\n        <button className=\"logo\"> Snake-game </button>\n        <button className=\"play animate\" id=\"playButton\" onClick = {playGame}>PLAY</button>\n        <button className=\"headerButton\" id=\"header-selector\"> SPEED \n        <div className=\"header-dropdown\">\n            <div>\n              <div onClick={(() => speedHandler(\"easy\"))}>\n                EASY\n              </div>\n              <div onClick={(() => speedHandler(\"normal\"))}>\n                NORMAL\n              </div>\n              <div onClick={(() => speedHandler(\"hard\"))}>\n                HARD\n              </div>\n            </div>\n          </div>\n\n        </button>\n        <button id=\"resetButton\"onClick={resetHandler}> RESET </button>\n      </ul>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Overlay = ({ score }) => {\n  return (\n    <div className=\"legend\" id=\"legend\">\n      <div>SCORE: {score}</div>\n    </div>\n  );\n};\n\nexport default Overlay;\n","import React from \"react\";\n\nconst Node = ({ state, row, col, id }) => {\n  return <div className={state} row={row} col={col} id={id}></div>;\n};\n\nexport default Node;\n","import React from \"react\";\nimport Node from \"./Node\";\n\nconst PlayArea = ({ grid }) => {\n  return (\n    <div className=\"playArea\">\n      <div className=\"node_container\">\n        {grid.map((row, rowIDX) => {\n          return (\n            <div className=\"node_row\" key={rowIDX}>\n              {row.map((node, colIDX) => (\n                <Node\n                  state={node.state}\n                  row={rowIDX}\n                  col={colIDX}\n                  id={`${rowIDX}-${colIDX}`} //Maybe not needed, replace the key with the id\n                  key={colIDX}\n                />\n              ))}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default PlayArea;\n","import { useState, useEffect } from \"react\";\nimport useInterval from \"./useInterval\";\nimport Node from \"./node\";\nimport Gameover from \"./Components/Gameover\";\nimport Header from \"./Components/Header\";\nimport Overlay from \"./Components/Overlay\";\nimport PlayArea from \"./Components/PlayArea\";\n\nclass SnakeBody {\n  constructor(row, col, next) {\n    this.row = row;\n    this.col = col;\n    this.nextBody = next;\n  }\n}\n\nfunction App() {\n  // The states\n  const [snakeHead, setHead] = useState({\n    row: 4,\n    col: 3,\n    directionHead: \"e\",\n    nextBody: new SnakeBody(4, 5, undefined),\n    tail: undefined,\n  });\n  const [boardState, setState] = useState({\n    grid: initialGrid(),\n    isStarted: false,\n  });\n  const [isRunning, setRunning] = useState(false);\n  const [direction, setDirection] = useState(\"e\");\n  const [gameScore, setScore] = useState(0);\n  const [gameSpeed, setSpeed] = useState(300);\n\n  function playGame() {\n    document.getElementById(\"playButton\").classList.remove(\"animate\");\n    if (boardState.isStarted === true) return;\n    setRunning(true);\n    setState({ ...boardState, isStarted: true });\n  }\n\n  useEffect(() => {\n    // Listens to keyinput\n    window.addEventListener(\"keypress\", (e) => {\n      e.stopImmediatePropagation();\n      handleDirectionChange(e);\n    });\n  });\n\n  useInterval(\n    // The main loop of the game\n    () => {\n      resetBoard();\n      moveSnake();\n    },\n    isRunning ? gameSpeed : null\n  );\n\n  function resetBoard() {\n    // Resets the board by setting al the snakecomponents to node\n    let newGrid = boardState.grid.slice();\n    newGrid[snakeHead.row][snakeHead.col].state = \"node\";\n    let current = snakeHead.nextBody;\n    while (current !== undefined) {\n      newGrid[current.row][current.col].state = \"node\";\n      current = current.nextBody;\n    }\n    setState({ ...boardState, grid: newGrid });\n  }\n\n  function moveSnake() {\n    // Does everything after it is resetted\n    if (isDirectionValid()) {\n      // direction is valid if the input isn't opposite of the current direction -> e.g. input: N, direction: S\n      updateSnakeHeadUsingGlobalDirection();\n    } else updateSnakeHeadUsingSnakeHeadDirection(); // The initial direction is used to update if the direction isnt valid\n  }\n\n  function handleDirectionChange(e) {\n    // Name says it all\n    if (e.key === \"w\") {\n      setDirection(\"n\");\n    } else if (e.key === \"d\") {\n      setDirection(\"e\");\n    } else if (e.key === \"s\") {\n      setDirection(\"s\");\n    } else if (e.key === \"a\") {\n      setDirection(\"w\");\n    } else return;\n  }\n\n  function isDirectionValid() {\n    // Checks if input direction is opposite to the initial direction\n    if (snakeHead.directionHead === \"n\" && direction === \"s\") {\n      return false;\n    } else if (snakeHead.directionHead === \"s\" && direction === \"n\") {\n      return false;\n    } else if (snakeHead.directionHead === \"e\" && direction === \"w\") {\n      return false;\n    } else if (snakeHead.directionHead === \"w\" && direction === \"e\") {\n      return false;\n    } else return true;\n  }\n\n  function updateSnakeHeadUsingGlobalDirection() {\n    // Updates the snake based on input direction\n    var newCol = snakeHead.col;\n    let newRow = snakeHead.row;\n    let newDirection = \"\";\n    if (direction === \"e\") {\n      let newSnakeHeadCol = snakeHead.col + 1;\n      if (newSnakeHeadCol < 10) {\n        newCol = newSnakeHeadCol;\n        newDirection = \"e\";\n      } else gameOver();\n    } else if (direction === \"s\") {\n      let newSnakeHeadRow = snakeHead.row + 1;\n      if (newSnakeHeadRow < 10) {\n        newRow = newSnakeHeadRow;\n        newDirection = \"s\";\n      } else gameOver();\n    } else if (direction === \"w\") {\n      let newSnakeHeadCol = snakeHead.col - 1;\n      if (newSnakeHeadCol >= 0) {\n        newCol = newSnakeHeadCol;\n        newDirection = \"w\";\n      } else gameOver();\n    } else if (direction === \"n\") {\n      let newSnakeHeadRow = snakeHead.row - 1;\n      if (newSnakeHeadRow >= 0) {\n        newRow = newSnakeHeadRow;\n        newDirection = \"n\";\n      } else gameOver();\n    }\n    if (checkPotentialDeath(newRow, newCol) === false) gameOver();\n    setHead({\n      ...snakeHead,\n      col: newCol,\n      row: newRow,\n      directionHead: newDirection,\n    });\n    updateSnake(newRow, newCol);\n  }\n\n  function updateSnakeHeadUsingSnakeHeadDirection() {\n    // Updates snake on initial direction\n    let newCol = snakeHead.col;\n    let newRow = snakeHead.row;\n    let newDirection = \"\";\n    if (snakeHead.directionHead === \"e\") {\n      let newSnakeHeadCol = snakeHead.col + 1;\n      if (newSnakeHeadCol < 10) {\n        newCol = newSnakeHeadCol;\n        newDirection = \"e\";\n      } else gameOver();\n    } else if (snakeHead.directionHead === \"s\") {\n      let newSnakeHeadRow = snakeHead.row + 1;\n      if (newSnakeHeadRow < 10) {\n        newRow = newSnakeHeadRow;\n        newDirection = \"s\";\n      } else gameOver();\n    } else if (snakeHead.directionHead === \"w\") {\n      let newSnakeHeadCol = snakeHead.col - 1;\n      if (newSnakeHeadCol >= 0) {\n        newCol = newSnakeHeadCol;\n        newDirection = \"w\";\n      } else gameOver();\n    } else if (snakeHead.directionHead === \"n\") {\n      let newSnakeHeadRow = snakeHead.row - 1;\n      if (newSnakeHeadRow >= 0) {\n        newRow = newSnakeHeadRow;\n        newDirection = \"n\";\n      } else gameOver();\n    }\n    if (checkPotentialDeath(newRow, newCol) === false) gameOver();\n    setHead({\n      ...snakeHead,\n      col: newCol,\n      row: newRow,\n      directionHead: newDirection,\n    });\n    updateSnake(newRow, newCol);\n  }\n\n  function gameOver(win) {\n    if (win) {\n      // something extra\n      setRunning(false);\n      document.getElementById(\"pop-up\").style.display = \"inline-block\";\n      document.getElementById(\"pop-up\").innerHTML = \"CONGRATULATIONS !!\";\n    } else {\n      setRunning(false);\n      document.getElementById(\"resetButton\").classList.add(\"animate\");\n      document.getElementById(\"pop-up\").style.display = \"inline-block\";\n    }\n  }\n\n  function checkPotentialDeath(row, col) {\n    // Chdcks if the snake collided with itself\n    let current = snakeHead.nextBody;\n    while (current) {\n      if (current.row === row && current.col === col) {\n        return false;\n      }\n      current = current.nextBody;\n    }\n    return true;\n  }\n\n  function updateSnake(newRow, newCol) {\n    // Updates the position of the snakebodies\n    let current = snakeHead.nextBody;\n    let previous = snakeHead;\n    // Start at the nextbody, since the head's cords arent updated yet\n    while (current !== undefined) {\n      let saveCurrent = new SnakeBody(\n        current.row,\n        current.col,\n        current.nextBody\n      );\n      // Make a new object with current's settings to call for the next round\n      current.col = previous.col;\n      current.row = previous.row;\n      // switch the cords of the previous node\n      previous = saveCurrent;\n      // insert the \"saved\" current with its old cords instead of its new cords\n      if (current.nextBody === undefined) snakeHead.tail = current;\n      // if current doesn't have a next body, then current is the tail\n      current = current.nextBody;\n      // saveCurrent.nextbody could also be used since the nextbody hasn't been altered\n    }\n    updateBoard(newRow, newCol);\n  }\n\n  function updateBoard(row, col) {\n    // For each updates snakebody, it draws it to the board\n    let newGrid = boardState.grid.slice();\n    if (newGrid[row][col].state === \"node-isFood\") {\n      foodConsumption();\n    }\n    newGrid[row][col].state = \"node-isSnake\";\n    let current = snakeHead.nextBody;\n    while (current !== undefined) {\n      newGrid[current.row][current.col].state = \"node-isSnakeBody\";\n      current = current.nextBody;\n    }\n    setState({ ...boardState, grid: newGrid });\n  }\n\n  function foodConsumption() {\n    // Handles growth and foodconsumption\n    // Overlay score update\n    let newScore = gameScore;\n    newScore += 1;\n    setScore(newScore);\n    let current = snakeHead;\n    while (current !== undefined) {\n      if (current.nextBody === undefined) {\n        current.nextBody = new SnakeBody(current.row, current.col, undefined);\n        break;\n      }\n      current = current.nextBody;\n    }\n    generateNewFoodObject();\n  }\n\n  function generateNewFoodObject(cells) {\n    // Generates a new food object\n    if (cells === undefined) {\n      cells = new Set();\n      let current = snakeHead;\n      while (current) {\n        cells.add(`${current.row} ${current.col}`);\n        current = current.nextBody;\n      }\n    }\n    if (cells.size === 79) gameOver(\"win\"); // Wins\n    let newGrid = boardState.grid.slice();\n    let newFoodCol = Math.floor(Math.random() * 10);\n    let newFoodRow = Math.floor(Math.random() * 10);\n    if (cells.has(`${newFoodRow} ${newFoodCol}`)) {\n      console.log(\"yes\");\n      generateNewFoodObject();\n    } else {\n      newGrid[newFoodRow][newFoodCol].state = \"node-isFood\";\n      setState({ ...boardState, grid: newGrid });\n    }\n  }\n\n  function initialGrid() {\n    // Creating the initial grid\n    let initialGrid = [];\n    for (let i = 0; i < 10; i++) {\n      initialGrid.push([]);\n      for (let j = 0; j < 10; j++) {\n        initialGrid[i].push(new Node(i, j));\n        if (i === 4 && j === 3) {\n          initialGrid[i][j].state = \"node-isSnake\";\n        }\n        if (i === 4 && j === 6) {\n          initialGrid[i][j].state = \"node-isFood\";\n        }\n      }\n    }\n    return initialGrid;\n  }\n\n  function speedHandler(mode) {\n    if (mode === \"easy\") {\n      setSpeed(450);\n    } else if (mode === \"normal\") {\n      setSpeed(300);\n    } else setSpeed(200);\n  }\n\n  function resetHandler() {\n    document.getElementById(\"pop-up\").style.display = \"none\";\n    document.getElementById(\"resetButton\").classList.remove(\"animate\");\n    document.getElementById(\"playButton\").classList.add(\"animate\");\n    setRunning(false);\n    setDirection(\"e\");\n    setScore(0);\n    setHead({\n      row: 4,\n      col: 3,\n      directionHead: \"e\",\n      nextBody: new SnakeBody(4, 5, undefined),\n      tail: undefined,\n    });\n    setState({\n      grid: initialGrid(),\n      isStarted: false,\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <Gameover />\n      <Header\n        resetHandler={resetHandler}\n        playGame={playGame}\n        speedHandler={speedHandler}\n      />\n      <Overlay score={gameScore} />\n      <PlayArea grid={boardState.grid} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}